#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.7
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 764)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'183,187,245,69,248,70,241,290,169,9,17,69,351,190,194,199,333,169,71',
'-175,291,305,182,185,191,193,168,100,-156,9,17,235,236,9,17,168,175',
'88,166,92,200,345,67,251,343,184,189,171,100,195,196,177,178,180,181',
'77,186,192,9,17,245,143,88,179,92,102,76,171,104,303,31,91,142,168,48',
'241,312,148,18,82,77,313,36,9,17,95,102,35,302,104,371,76,346,35,51',
'31,91,-111,52,48,347,9,17,18,82,235,236,36,35,345,95,40,343,47,1,143',
'10,15,35,25,31,38,100,44,48,3,142,115,18,9,17,148,36,88,76,92,51,54',
'31,136,52,239,48,35,51,-162,18,18,52,238,36,77,-111,-111,-111,-111,262',
'9,17,261,102,35,76,104,369,250,31,91,143,-104,48,247,241,243,18,82,51',
'320,36,142,52,95,35,327,148,40,330,47,1,35,10,15,143,25,31,38,155,44',
'48,3,9,17,18,142,223,322,36,296,148,227,9,17,234,64,88,235,236,35,195',
'196,177,178,62,63,223,186,192,162,40,227,47,1,179,10,15,288,25,31,38',
'286,44,48,3,76,328,18,329,31,91,36,106,48,9,17,-157,18,88,-158,92,36',
'35,195,196,177,178,180,181,-156,186,192,35,-155,186,192,77,179,282,9',
'17,179,195,196,177,178,367,76,35,186,192,31,91,35,263,48,179,186,192',
'18,82,252,250,36,179,247,95,40,245,47,1,162,10,15,35,25,31,38,244,44',
'48,3,241,243,18,9,17,168,36,88,257,92,177,178,241,256,331,186,192,35',
'241,243,9,17,179,229,88,77,92,177,178,228,292,221,186,192,241,256,76',
'218,197,179,31,91,77,338,48,155,340,341,18,82,-103,106,36,76,-161,95',
'342,31,91,-159,-157,48,-160,35,-158,18,82,9,17,36,306,88,95,92,64,-155',
'354,9,17,-162,35,88,356,92,-208,119,162,9,17,77,-28,-28,-28,-28,58,59',
'60,56,357,77,76,155,151,70,31,91,119,115,48,360,76,247,18,82,31,91,36',
'107,48,95,76,106,18,82,31,136,36,35,48,95,9,17,18,364,-157,366,36,35',
'97,-158,9,17,72,61,88,55,92,35,-24,-24,-24,-24,58,59,60,56,372,373,40',
',47,1,77,10,15,,25,31,38,,44,48,3,76,,18,,31,91,36,,48,,285,,18,82,',
',36,35,,95,190,194,-22,-22,-22,-22,,35,,182,185,191,193,,,,,,,,9,17',
',,109,,-175,,,,,,184,189,,,195,196,177,178,180,181,108,186,192,9,17',
',,88,179,92,,76,,,,31,91,,,48,9,17,,18,88,77,92,36,,,,,,,,,76,,35,,31',
'91,77,,48,,,,18,82,,,36,76,,95,,31,91,,,48,,35,,18,82,9,17,36,,88,95',
'92,,,,9,17,,35,88,,92,,,,,,77,,,,,,,,,,77,76,,9,17,31,91,,,48,359,76',
',18,82,31,91,36,,48,95,,,18,82,,,36,35,,95,40,,47,1,,10,15,35,25,31',
'38,,44,48,3,,,18,9,17,,36,88,,92,,,,9,17,,,35,,,,,,9,17,77,,,,137,,',
',,,,76,,,,31,91,,,48,,76,51,18,82,31,126,36,44,48,95,76,,18,,31,136',
'36,35,48,9,17,,18,88,,92,36,35,,9,17,,,88,,92,,35,,9,17,77,,88,,92,',
',,,,77,76,,,,31,91,,,48,77,76,,18,82,31,91,36,,48,95,76,,18,82,31,91',
'36,35,48,95,,,18,82,9,17,36,35,88,95,92,,,,9,17,,35,,,,,,,9,17,77,,88',
',92,,,,,,,76,,,,31,91,,,48,77,76,,18,82,31,136,36,,48,95,76,,18,,31',
'91,36,35,48,,,,18,82,9,17,36,35,88,95,92,,,,9,17,,35,88,,92,,,,9,17',
'77,,88,,92,,,,,,77,76,,,,31,91,,,48,77,76,,18,82,31,91,36,,48,95,76',
',18,82,31,91,36,35,48,95,,,18,82,9,17,36,35,88,95,92,,,,9,17,,35,88',
',92,,,,9,17,77,,,,,,,,,,77,76,,,,31,91,,,48,,76,,18,82,31,91,36,,48',
'95,76,,18,82,31,136,36,35,48,95,,,18,,9,17,36,35,88,,92,,,,9,17,,35',
'88,,92,,,,9,17,77,,88,,92,,,,,,77,76,,,,31,91,,,48,77,76,,18,82,31,91',
'36,,48,95,76,,18,82,31,91,36,35,48,95,,,18,82,9,17,36,35,88,95,92,,',
',9,17,,35,88,,92,,,,9,17,77,,,,,349,,,,,77,76,,,,31,91,,,48,,76,,18',
'82,31,91,36,,48,95,76,,18,82,31,136,36,35,48,95,,,18,,9,17,36,35,88',
',92,,,,9,17,,35,88,,92,,,,9,17,77,,88,,92,,,,,,77,76,,,,31,91,,,48,77',
'76,,18,82,31,91,36,,48,95,76,,18,82,31,91,36,35,48,95,,,18,82,9,17,36',
'35,,95,,308,,,,,,35,,195,196,177,178,180,181,,186,192,,9,17,,40,179',
'47,1,,10,15,,25,31,38,,44,48,3,,,18,9,17,,36,88,,92,40,,47,1,,10,15',
'35,25,31,38,,44,48,3,77,,18,9,17,,36,88,,92,,76,,,,31,91,35,,48,,,,18',
'82,77,,36,9,17,95,,88,,92,,76,,35,,31,91,,,48,,,,18,82,77,,36,9,17,95',
',88,,92,,76,,35,,31,91,,,48,,,,18,82,77,,36,9,17,95,,,,,,76,,35,,31',
'91,9,17,48,,88,,18,82,,,36,,,95,40,,47,1,,10,15,35,25,31,38,,44,48,3',
',,18,,76,,36,,31,136,,,48,,,,18,35,9,17,36,,88,,92,,,,9,17,,35,88,,92',
',,,9,17,77,,88,,,,,,,,77,76,,,,31,91,,,48,,76,,18,82,31,91,36,,48,95',
'76,,18,82,31,210,36,35,48,95,,,18,,9,17,36,35,88,,92,,,,9,17,,35,88',
'166,92,,,,,,77,215,,,,,,,,,77,76,,9,17,31,91,,,48,336,76,,18,82,31,91',
'36,,48,95,,,18,82,,,36,35,,95,40,,47,1,,10,15,35,25,31,38,,44,48,3,',
',18,9,17,,36,88,,92,,,,,,,,35,,,9,17,,,88,77,92,,,,,,,,,,76,,,,31,91',
'77,258,48,,,,18,82,,,36,76,,95,,31,91,9,17,48,,35,232,18,82,,,36,,,95',
',190,194,,,,,35,,,182,185,191,193,,,,9,17,76,51,88,,31,126,,44,48,,',
',18,,184,189,36,,195,196,177,178,180,181,,186,192,35,,,,76,179,,,31',
'91,,,48,,219,,18,,,,36,,,190,194,,,,,220,,35,182,185,191,193,,,190,194',
',,,,,,,182,185,191,193,,,,,184,189,,,195,196,177,178,180,181,,186,192',
',,184,189,,179,195,196,177,178,180,181,,186,192,190,194,,,,179,,,,182',
'185,191,193,,,190,194,,,,,,,,182,185,191,193,,,,,,,,,195,196,177,178',
'180,181,,186,192,,,184,189,,179,195,196,177,178,180,181,,186,192,190',
'194,,,,179,,,,182,185,191,193,,,190,194,,,,,,,,182,185,191,193,,,,,184',
'189,,,195,196,177,178,180,181,,186,192,,,184,189,,179,195,196,177,178',
'180,181,,186,192,190,194,,,,179,,,,182,185,191,193,,,190,194,,,,,,,',
'182,185,191,193,,,,,184,189,,,195,196,177,178,180,181,,186,192,,,184',
'189,,179,195,196,177,178,180,181,,186,192,190,194,,,,179,,,,182,185',
'191,193,,,190,194,,,,,,,,182,185,191,193,,,,,184,189,,,195,196,177,178',
'180,181,,186,192,,,184,189,,179,195,196,177,178,180,181,,186,192,190',
'194,,,,179,,,,182,185,191,193,,,190,194,,,,,,,255,182,185,191,193,,',
',,184,189,,,195,196,177,178,180,181,,186,192,,,184,189,,179,195,196',
'177,178,180,181,,186,192,190,194,,,,179,,,,182,185,191,193,,,190,194',
',,,,,,,182,185,191,193,,,,,184,189,,,195,196,177,178,180,181,,186,192',
',,184,189,,179,195,196,177,178,180,181,,186,192,190,194,,,,179,,,,182',
'185,191,193,,,190,194,,,,,,,,182,185,191,193,,,,,,189,,,195,196,177',
'178,180,181,,186,192,,,,,,179,195,196,177,178,180,181,,186,192,190,194',
',,,179,,,,182,185,191,193,,,,194,,,,,,,,182,,,,,,,,,,194,,195,196,177',
'178,180,181,182,186,192,,,,,194,179,195,196,177,178,180,181,182,186',
'192,,,,,,179,,194,,195,196,177,178,180,181,182,186,192,,,,,,179,195',
'196,177,178,180,181,,186,192,,,,,,179,,,,195,196,177,178,180,181,,186',
'192,,,,,,179' ]
        racc_action_table = arr = Array.new(2325, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'96,96,162,12,157,12,216,216,91,261,261,79,304,96,96,105,261,126,12,126',
'216,225,96,96,96,96,91,25,79,92,92,157,157,88,88,126,92,88,88,88,105',
'296,12,162,296,96,96,261,200,96,96,96,96,96,96,88,96,96,238,238,210',
'71,238,96,238,25,88,92,25,224,88,88,71,210,88,231,231,71,88,88,238,233',
'88,366,366,88,200,25,223,200,366,238,298,88,1,238,238,292,1,238,298',
'220,220,238,238,233,233,238,200,342,238,366,342,366,366,143,366,366',
'238,366,366,366,199,366,366,366,143,221,366,239,239,143,366,239,220',
'239,11,2,220,220,11,150,220,366,15,2,220,11,15,150,220,239,292,292,292',
'292,172,364,364,172,199,220,239,199,364,240,239,239,237,215,239,214',
'259,259,239,239,252,246,239,237,252,239,199,252,237,364,259,364,364',
'239,364,364,67,364,364,364,247,364,364,364,219,219,364,67,119,249,364',
'219,67,119,218,218,145,10,218,145,145,364,268,268,268,268,10,10,305',
'268,268,250,219,305,219,219,268,219,219,213,219,219,219,211,219,219',
'219,218,254,219,256,218,218,219,209,218,242,242,207,218,242,205,242',
'218,219,279,279,279,279,279,279,204,279,279,218,203,264,264,242,279',
'198,358,358,264,267,267,267,267,358,242,192,267,267,242,242,186,174',
'242,267,265,265,242,242,163,159,242,265,156,242,358,155,358,358,151',
'358,358,242,358,358,358,152,358,358,358,152,152,358,245,245,136,358',
'245,167,245,280,280,167,167,260,280,280,358,260,260,17,17,280,131,17',
'245,17,281,281,121,217,117,281,281,217,217,245,110,97,281,245,245,17',
'287,245,288,289,290,245,245,291,90,245,17,89,245,295,17,17,86,85,17',
'81,245,80,17,17,251,251,17,227,251,17,251,76,75,307,263,263,74,17,263',
'311,263,312,73,72,346,346,251,7,7,7,7,4,4,4,4,317,263,251,70,68,65,251',
'251,53,47,251,335,263,339,251,251,263,263,251,37,263,251,346,32,263',
'263,346,346,263,251,346,263,24,24,346,345,22,347,346,263,21,19,343,343',
'13,8,343,3,343,346,50,50,50,50,49,49,49,49,368,370,24,,24,24,343,24',
'24,,24,24,24,,24,24,24,343,,24,,343,343,24,,343,,202,,343,343,,,343',
'24,,343,202,202,42,42,42,42,,343,,202,202,202,202,,,,,,,,38,38,,,38',
',38,,,,,,202,202,,,202,202,202,202,202,202,38,202,202,40,40,,,40,202',
'40,,38,,,,38,38,,,38,44,44,,38,44,40,44,38,,,,,,,,,40,,38,,40,40,44',
',40,,,,40,40,,,40,44,,40,,44,44,,,44,,40,,44,44,196,196,44,,196,44,196',
',,,195,195,,44,195,,195,,,,,,196,,,,,,,,,,195,196,,328,328,196,196,',
',196,328,195,,196,196,195,195,196,,195,196,,,195,195,,,195,196,,195',
'328,,328,328,,328,328,195,328,328,328,,328,328,328,,,328,54,54,,328',
'54,,54,,,,57,57,,,328,,,,,,61,61,54,,,,61,,,,,,,54,,,,54,54,,,54,,57',
'57,54,54,57,57,54,57,57,54,61,,57,,61,61,57,54,61,62,62,,61,62,,62,61',
'57,,63,63,,,63,,63,,61,,64,64,62,,64,,64,,,,,,63,62,,,,62,62,,,62,64',
'63,,62,62,63,63,62,,63,62,64,,63,63,64,64,63,62,64,63,,,64,64,194,194',
'64,63,194,64,194,,,,137,137,,64,,,,,,,193,193,194,,193,,193,,,,,,,194',
',,,194,194,,,194,193,137,,194,194,137,137,194,,137,194,193,,137,,193',
'193,137,194,193,,,,193,193,69,69,193,137,69,193,69,,,,191,191,,193,191',
',191,,,,190,190,69,,190,,190,,,,,,191,69,,,,69,69,,,69,190,191,,69,69',
'191,191,69,,191,69,190,,191,191,190,190,191,69,190,191,,,190,190,189',
'189,190,191,189,190,189,,,,185,185,,190,185,,185,,,,310,310,189,,,,',
',,,,,185,189,,,,189,189,,,189,,185,,189,189,185,185,189,,185,189,310',
',185,185,310,310,185,189,310,185,,,310,,306,306,310,185,306,,306,,,',
'184,184,,310,184,,184,,,,77,77,306,,77,,77,,,,,,184,306,,,,306,306,',
',306,77,184,,306,306,184,184,306,,184,306,77,,184,184,77,77,184,306',
'77,184,,,77,77,183,183,77,184,183,77,183,,,,302,302,,77,302,,302,,,',
'300,300,183,,,,,300,,,,,302,183,,,,183,183,,,183,,302,,183,183,302,302',
'183,,302,183,300,,302,302,300,300,302,183,300,302,,,300,,82,82,300,302',
'82,,82,,,,182,182,,300,182,,182,,,,181,181,82,,181,,181,,,,,,182,82',
',,,82,82,,,82,181,182,,82,82,182,182,82,,182,82,181,,182,182,181,181',
'182,82,181,182,,,181,181,228,228,181,182,,181,,228,,,,,,181,,269,269',
'269,269,269,269,,269,269,,294,294,,228,269,228,228,,228,228,,228,228',
'228,,228,228,228,,,228,180,180,,228,180,,180,294,,294,294,,294,294,228',
'294,294,294,,294,294,294,180,,294,179,179,,294,179,,179,,180,,,,180',
'180,294,,180,,,,180,180,179,,180,178,178,180,,178,,178,,179,,180,,179',
'179,,,179,,,,179,179,178,,179,95,95,179,,95,,95,,178,,179,,178,178,',
',178,,,,178,178,95,,178,0,0,178,,,,,,95,,178,,95,95,286,286,95,,286',
',95,95,,,95,,,95,0,,0,0,,0,0,95,0,0,0,,0,0,0,,,0,,286,,0,,286,286,,',
'286,,,,286,0,177,177,286,,177,,177,,,,106,106,,286,106,,106,,,,107,107',
'177,,107,,,,,,,,106,177,,,,177,177,,,177,,106,,177,177,106,106,177,',
'106,177,107,,106,106,107,107,106,177,107,106,,,107,,108,108,107,106',
'108,,108,,,,109,109,,107,109,109,109,,,,,,108,108,,,,,,,,,109,108,,282',
'282,108,108,,,108,282,109,,108,108,109,109,108,,109,108,,,109,109,,',
'109,108,,109,282,,282,282,,282,282,109,282,282,282,,282,282,282,,,282',
'169,169,,282,169,,169,,,,,,,,282,,,168,168,,,168,169,168,,,,,,,,,,169',
',,,169,169,168,168,169,,,,169,169,,,169,168,,169,,168,168,118,118,168',
',169,140,168,168,,,168,,,168,,140,140,,,,,168,,,140,140,140,140,,,,229',
'229,118,118,229,,118,118,,118,118,,,,118,,140,140,118,,140,140,140,140',
'140,140,,140,140,118,,,,229,140,,,229,229,,,229,,113,,229,,,,229,,,113',
'113,,,,,114,,229,113,113,113,113,,,114,114,,,,,,,,114,114,114,114,,',
',,113,113,,,113,113,113,113,113,113,,113,113,,,114,114,,113,114,114',
'114,114,114,114,,114,114,316,316,,,,114,,,,316,316,316,316,,,319,319',
',,,,,,,319,319,319,319,,,,,,,,,316,316,316,316,316,316,,316,316,,,319',
'319,,316,319,319,319,319,319,319,,319,319,324,324,,,,319,,,,324,324',
'324,324,,,138,138,,,,,,,,138,138,138,138,,,,,324,324,,,324,324,324,324',
'324,324,,324,324,,,138,138,,324,138,138,138,138,138,138,,138,138,139',
'139,,,,138,,,,139,139,139,139,,,318,318,,,,,,,,318,318,318,318,,,,,139',
'139,,,139,139,139,139,139,139,,139,139,,,318,318,,139,318,318,318,318',
'318,318,,318,318,122,122,,,,318,,,,122,122,122,122,,,353,353,,,,,,,',
'353,353,353,353,,,,,122,122,,,122,122,122,122,122,122,,122,122,,,353',
'353,,122,353,353,353,353,353,353,,353,353,334,334,,,,353,,,,334,334',
'334,334,,,164,164,,,,,,,164,164,164,164,164,,,,,334,334,,,334,334,334',
'334,334,334,,334,334,,,164,164,,334,164,164,164,164,164,164,,164,164',
'350,350,,,,164,,,,350,350,350,350,,,153,153,,,,,,,,153,153,153,153,',
',,,350,350,,,350,350,350,350,350,350,,350,350,,,153,153,,350,153,153',
'153,153,153,153,,153,153,271,271,,,,153,,,,271,271,271,271,,,274,274',
',,,,,,,274,274,274,274,,,,,,271,,,271,271,271,271,271,271,,271,271,',
',,,,271,274,274,274,274,274,274,,274,274,315,315,,,,274,,,,315,315,315',
'315,,,,272,,,,,,,,272,,,,,,,,,,276,,315,315,315,315,315,315,276,315',
'315,,,,,275,315,272,272,272,272,272,272,275,272,272,,,,,,272,,278,,276',
'276,276,276,276,276,278,276,276,,,,,,276,275,275,275,275,275,275,,275',
'275,,,,,,275,,,,278,278,278,278,278,278,,278,278,,,,,,278' ]
        racc_action_check = arr = Array.new(2325, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1378,    58,   122,   421,   351,   nil,   nil,   347,   440,   nil,
   207,   100,    -3,   454,   nil,   108,   nil,   338,   nil,   436,
   nil,   458,   431,   nil,   448,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   435,   nil,   nil,   nil,   nil,   429,   531,   nil,
   556,   nil,   452,   nil,   573,   nil,   nil,   425,   nil,   409,
   405,   nil,   nil,   402,   701,   nil,   nil,   711,   nil,   nil,
   nil,   721,   763,   773,   783,   415,   nil,   168,   414,   897,
   381,    37,   366,   381,   376,   372,   388,  1051,   nil,     5,
   361,   359,  1165,   nil,   nil,   357,   356,   nil,    31,   351,
   365,     2,    27,   nil,   nil,  1353,    -4,   358,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     3,  1449,  1459,  1506,  1516,
   345,   nil,   nil,  1711,  1726,   nil,   nil,   339,  1643,   169,
   nil,   341,  1951,   nil,   nil,   nil,    11,   nil,   nil,   nil,
   nil,   332,   nil,   nil,   nil,   nil,   301,   840,  1846,  1891,
  1643,   nil,   nil,    91,   nil,   166,   nil,   nil,   nil,   nil,
   123,   269,   309,  2086,   nil,   295,   291,   -18,   nil,   288,
   nil,   nil,    -9,   262,  2026,   nil,   nil,   321,  1604,  1587,
   nil,   nil,   147,   nil,   281,   nil,   nil,  1439,  1328,  1303,
  1278,  1185,  1175,  1098,  1041,   974,   229,   nil,   nil,   964,
   917,   907,   224,   850,   830,   630,   620,   nil,   268,   120,
    46,   nil,   496,   248,   244,   234,   nil,   231,   nil,   244,
    49,   198,   nil,   215,   159,   146,    -5,   343,   208,   198,
    99,   125,   nil,    73,    44,     9,   nil,   375,  1232,  1674,
   nil,    64,   nil,    56,   nil,   nil,   nil,   144,    56,   127,
   153,   nil,   250,   nil,   nil,   321,   168,   156,   nil,   196,
   187,   385,   140,   nil,   236,   nil,   239,   nil,   nil,   161,
   327,     7,   nil,   395,   212,   235,   nil,   227,   165,  1196,
   nil,  2131,  2206,   nil,  2146,  2239,  2224,   nil,  2257,   208,
   275,   292,  1541,   nil,   nil,   nil,  1392,   354,   325,   357,
   342,   347,    89,   nil,  1257,   367,    10,   nil,    80,   nil,
  1118,   nil,  1108,   nil,   -13,   189,  1031,   387,   nil,   nil,
   984,   393,   395,   nil,   nil,  2191,  1771,   409,  1906,  1786,
   nil,   nil,   nil,   nil,  1831,   nil,   nil,   nil,   655,   nil,
   nil,   nil,   nil,   nil,  2011,   420,   nil,   nil,   nil,   419,
   nil,   nil,    78,   458,   nil,   445,   405,   447,   nil,   nil,
  2071,   nil,   nil,  1966,   nil,   nil,   nil,   nil,   275,   nil,
   nil,   nil,   nil,   nil,   155,   nil,    81,   nil,   467,   nil,
   468,   nil,   nil,   nil ]

racc_action_default = [
  -184,  -221,  -219,   -58,  -221,    -9,  -155,   -10,  -221,  -105,
  -201,  -221,  -156,   -23,   -11,  -176,  -160,  -221,   -82,   -25,
   -12,  -221,   -26,   -13,    -1,  -221,  -159,   -27,   -14,    -2,
  -161,  -110,   -29,   -15,    -3,  -209,   -80,  -221,   -81,   -16,
  -221,   -17,    -6,  -164,  -221,   -18,    -7,  -221,  -163,   -19,
    -8,  -176,  -175,  -184,  -221,   -59,   -33,  -221,   -30,   -31,
   -32,  -221,  -221,  -221,  -221,  -221,   -57,  -184,   -61,  -221,
   -93,  -184,  -100,  -184,  -219,   -43,  -201,  -221,   -50,   -44,
   -47,   -45,  -221,  -106,   -48,   -42,   -51,   -46,  -221,   -52,
   -49,   -81,  -221,  -121,  -120,  -221,  -221,  -221,    -4,  -177,
  -181,  -179,  -180,  -183,  -182,  -184,  -221,   -93,  -221,  -221,
   -37,   -38,  -113,  -221,  -221,  -165,  -166,  -168,  -221,  -185,
  -186,  -221,   -91,   -20,   -28,   -23,   -81,   -22,   -24,  -162,
  -156,  -221,  -158,  -149,  -157,  -150,   -81,  -221,   -90,   -92,
  -221,   -74,  -201,  -184,   -73,  -221,   -65,   -64,   -81,   -67,
  -221,  -100,  -221,   -40,   -94,  -221,  -207,  -221,   -98,  -207,
   -99,  -101,  -221,  -184,  -221,  -138,  -204,  -221,  -221,  -221,
  -217,  -216,  -221,  -213,  -221,  -212,  -131,  -221,  -221,  -221,
  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -108,  -107,  -221,
  -221,  -221,  -221,  -221,  -221,  -221,  -221,   374,  -221,  -221,
  -221,  -195,  -221,   -84,   -85,   -87,   -88,   -83,   -86,   -89,
   -81,   -78,   -76,  -221,  -207,   -36,  -221,  -221,  -221,  -221,
  -221,  -221,   -21,  -194,  -221,  -207,  -189,  -192,  -221,  -221,
  -152,  -207,  -218,  -221,   -62,   -70,   -69,  -221,  -221,  -221,
  -207,  -205,  -221,  -206,  -112,  -221,  -221,  -208,   -63,  -221,
  -208,  -221,  -221,  -197,  -221,  -141,  -206,  -202,  -104,  -221,
  -221,  -221,  -210,  -221,  -128,  -127,  -122,  -129,  -130,  -133,
  -109,  -140,  -135,  -123,  -139,  -137,  -134,  -124,  -136,  -132,
  -125,  -126,  -221,  -178,  -196,  -220,   -79,  -221,   -93,  -221,
  -206,   -34,  -202,   -39,    -5,  -221,  -116,  -143,  -221,  -147,
  -221,  -167,  -221,  -187,  -221,  -208,  -221,  -221,  -170,  -154,
  -221,  -221,  -206,   -68,   -66,   -71,   -72,  -221,   -41,   -96,
   -55,   -95,   -56,  -102,   -97,  -198,  -199,  -200,  -221,  -203,
  -103,  -111,  -214,  -211,  -215,  -221,  -174,   -77,   -53,  -207,
   -54,   -35,  -116,  -221,  -115,  -221,  -221,  -221,  -144,  -142,
  -193,  -188,  -190,  -191,  -169,  -153,  -151,   -60,  -221,  -172,
  -173,   -75,  -114,  -117,  -221,  -148,  -221,  -171,  -221,  -119,
  -221,  -146,  -118,  -145 ]

racc_goto_table = [
    12,   112,    24,    30,    98,   135,   156,   131,    53,   111,
   246,    65,   226,   249,    99,   212,   206,   173,   116,    83,
    66,   297,    73,   159,    12,    26,   158,    30,   295,   123,
   344,   124,    16,    57,   152,   145,   103,   307,   128,   157,
    68,   300,    29,   214,   323,   121,   314,    13,   133,    26,
   188,   231,   287,   167,   117,   211,    16,    12,   254,   105,
    30,   130,   198,   310,    30,   163,   127,   284,   289,   224,
   225,    13,   110,   216,   217,   325,   362,   172,   118,   304,
    21,   230,    26,   131,   nil,   311,    26,   nil,   nil,    16,
   222,   335,   124,    16,   317,   120,   nil,   nil,   nil,   128,
   nil,   348,   240,   nil,   125,   158,   nil,   204,   nil,   nil,
    30,   233,   nil,   nil,   nil,   120,   nil,   nil,    12,   nil,
     6,    30,   nil,   nil,   nil,   nil,   nil,   127,   nil,   nil,
   nil,   nil,    26,   259,   260,     2,   nil,   130,   nil,    16,
    30,   nil,   nil,    26,     6,   nil,   nil,   201,   nil,   nil,
    16,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
    27,   nil,    26,   nil,   nil,   125,   299,   nil,   nil,    16,
   nil,   nil,   nil,   368,   nil,   370,   nil,     6,   nil,   nil,
   nil,     6,   nil,   nil,    27,   270,   332,   141,   283,   293,
   nil,   141,   301,   361,   337,   206,   129,   273,   352,   nil,
   309,   321,   nil,   277,   158,   253,   nil,   nil,   nil,   nil,
   103,   103,   nil,   nil,   nil,   nil,   nil,    27,   nil,    12,
   130,   nil,    30,    30,   339,   nil,   nil,   203,    12,   nil,
   nil,    30,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,
   nil,   nil,   nil,   nil,    26,    26,   299,   nil,   nil,   nil,
   nil,    16,    16,    26,   355,    22,   131,     6,   nil,   326,
    16,   nil,   nil,   141,   nil,   nil,    13,   208,   nil,   nil,
   nil,   nil,   129,   nil,    98,    13,   nil,    32,    27,    22,
   nil,   nil,    12,   nil,   nil,    30,   204,   nil,   nil,    30,
   nil,   nil,   365,   nil,    12,   nil,   nil,    30,   nil,   nil,
   130,    32,   nil,    30,   363,   nil,   nil,    26,   nil,   nil,
   130,    26,    22,    30,    16,   nil,   134,   nil,    16,    26,
   nil,   nil,   nil,   nil,   nil,    26,    16,   nil,    12,    13,
   358,    30,    16,   nil,    32,    26,   nil,   nil,    98,     6,
     6,    13,    16,   nil,   nil,   nil,   130,   170,     6,    30,
   nil,   nil,   nil,    26,     2,   129,   nil,   141,    12,   nil,
    16,    30,   207,     2,    12,   nil,    12,    30,   nil,    30,
   nil,    26,   nil,    22,   nil,    13,   nil,   nil,    16,    27,
    19,   nil,   nil,    26,   209,   nil,   nil,   nil,    27,    26,
    16,    26,   134,   nil,   nil,    32,    16,   nil,    16,   nil,
   nil,   nil,     6,   nil,    19,    13,   203,   nil,   nil,   nil,
   nil,    13,   nil,    13,     6,   nil,   nil,     2,   nil,   nil,
     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
     6,   nil,   nil,   nil,   nil,   129,   nil,    19,   nil,   nil,
   nil,   132,    27,   nil,   nil,   129,   208,   144,     6,   nil,
   nil,   144,   nil,   nil,    27,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,   nil,     6,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    22,   134,   nil,   nil,     6,   nil,
   nil,   129,   nil,    22,     6,   nil,     6,   205,    27,   nil,
   nil,   nil,   nil,     2,   nil,   nil,    32,   nil,    19,     2,
   nil,     2,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   170,   132,    27,   nil,
   nil,   nil,   nil,   144,    27,   nil,    27,   nil,   nil,   nil,
   nil,   nil,   nil,    96,   nil,   nil,   nil,    22,   nil,   nil,
   nil,   207,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
   nil,   nil,   nil,   nil,   nil,   134,   113,   nil,   nil,    32,
   114,   nil,   nil,   209,   nil,   134,   nil,   nil,   nil,   nil,
   122,    32,   nil,   nil,   nil,   nil,   nil,   nil,   138,   139,
   140,   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   164,   nil,   nil,   nil,   nil,   165,    19,
   132,   134,   nil,   nil,   nil,    32,   nil,   nil,    19,   nil,
   nil,   176,   nil,    22,   nil,   nil,   nil,   144,   nil,    22,
   nil,    22,   202,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,
   nil,    32,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    19,   nil,   nil,   nil,   205,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,
   132,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   132,   nil,   nil,   264,   265,   266,   267,   268,   269,    96,
   271,   272,   nil,   nil,   nil,   274,   275,   276,    19,   278,
   279,   280,   281,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   132,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,
   nil,   nil,   nil,   nil,    19,   nil,    19,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   315,   316,   nil,   nil,   318,   nil,
   nil,   319,   nil,   nil,   nil,   nil,   nil,   324,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   334,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   350,   nil,
   nil,   nil,   353,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   113 ]

racc_goto_check = [
    33,    59,     2,    37,     4,    68,    41,    66,    38,    29,
    42,    33,    80,    42,    76,    51,    35,    83,    70,    57,
     6,    64,    38,    43,    33,    36,    54,    37,     5,    20,
    60,    10,    34,    21,    27,    46,    62,     5,     8,    46,
    45,    63,     3,    41,    56,    72,    47,    22,    67,    36,
    58,    69,    40,    27,    71,    39,    34,    33,    73,    74,
    37,    33,    75,    31,    37,    72,     6,    77,    42,    78,
    79,    22,    28,    27,    27,    81,    60,    82,    21,    42,
     1,    68,    36,    66,   nil,    42,    36,   nil,   nil,    34,
    20,     5,    10,    34,    42,     3,   nil,   nil,   nil,     8,
   nil,    64,    43,   nil,    22,    54,   nil,    33,   nil,   nil,
    37,    46,   nil,   nil,   nil,     3,   nil,   nil,    33,   nil,
    32,    37,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,
   nil,   nil,    36,    27,    27,    53,   nil,    33,   nil,    34,
    37,   nil,   nil,    36,    32,   nil,   nil,     3,   nil,   nil,
    34,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    53,
    25,   nil,    36,   nil,   nil,    22,    66,   nil,   nil,    34,
   nil,   nil,   nil,     5,   nil,     5,   nil,    32,   nil,   nil,
   nil,    32,   nil,   nil,    25,    57,    83,    32,    76,    29,
   nil,    32,    70,    42,    51,    35,    53,    62,    80,   nil,
    29,    54,   nil,    62,    54,     3,   nil,   nil,   nil,   nil,
    62,    62,   nil,   nil,   nil,   nil,   nil,    25,   nil,    33,
    33,   nil,    37,    37,    41,   nil,   nil,    32,    33,   nil,
   nil,    37,   nil,   nil,   nil,   nil,   nil,   nil,    32,   nil,
   nil,   nil,   nil,   nil,    36,    36,    66,   nil,   nil,   nil,
   nil,    34,    34,    36,    68,    24,    66,    32,   nil,    38,
    34,   nil,   nil,    32,   nil,   nil,    22,    25,   nil,   nil,
   nil,   nil,    53,   nil,     4,    22,   nil,    26,    25,    24,
   nil,   nil,    33,   nil,   nil,    37,    33,   nil,   nil,    37,
   nil,   nil,    66,   nil,    33,   nil,   nil,    37,   nil,   nil,
    33,    26,   nil,    37,    59,   nil,   nil,    36,   nil,   nil,
    33,    36,    24,    37,    34,   nil,    24,   nil,    34,    36,
   nil,   nil,   nil,   nil,   nil,    36,    34,   nil,    33,    22,
     2,    37,    34,   nil,    26,    36,   nil,   nil,     4,    32,
    32,    22,    34,   nil,   nil,   nil,    33,    24,    32,    37,
   nil,   nil,   nil,    36,    53,    53,   nil,    32,    33,   nil,
    34,    37,    24,    53,    33,   nil,    33,    37,   nil,    37,
   nil,    36,   nil,    24,   nil,    22,   nil,   nil,    34,    25,
    23,   nil,   nil,    36,    26,   nil,   nil,   nil,    25,    36,
    34,    36,    24,   nil,   nil,    26,    34,   nil,    34,   nil,
   nil,   nil,    32,   nil,    23,    22,    32,   nil,   nil,   nil,
   nil,    22,   nil,    22,    32,   nil,   nil,    53,   nil,   nil,
    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    53,
    32,   nil,   nil,   nil,   nil,    53,   nil,    23,   nil,   nil,
   nil,    23,    25,   nil,   nil,    53,    25,    23,    32,   nil,
   nil,    23,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    53,   nil,   nil,    32,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    24,    24,   nil,   nil,    32,   nil,
   nil,    53,   nil,    24,    32,   nil,    32,    23,    25,   nil,
   nil,   nil,   nil,    53,   nil,   nil,    26,   nil,    23,    53,
   nil,    53,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    24,    23,    25,   nil,
   nil,   nil,   nil,    23,    25,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,    30,   nil,   nil,   nil,    24,   nil,   nil,
   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,
   nil,   nil,   nil,   nil,   nil,    24,    30,   nil,   nil,    26,
    30,   nil,   nil,    26,   nil,    24,   nil,   nil,   nil,   nil,
    30,    26,   nil,   nil,   nil,   nil,   nil,   nil,    30,    30,
    30,   nil,   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    30,   nil,   nil,   nil,   nil,    30,    23,
    23,    24,   nil,   nil,   nil,    26,   nil,   nil,    23,   nil,
   nil,    30,   nil,    24,   nil,   nil,   nil,    23,   nil,    24,
   nil,    24,    30,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,
   nil,    26,   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    23,   nil,   nil,   nil,    23,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,
    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    23,   nil,   nil,    30,    30,    30,    30,    30,    30,    30,
    30,    30,   nil,   nil,   nil,    30,    30,    30,    23,    30,
    30,    30,    30,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,
   nil,   nil,   nil,   nil,    23,   nil,    23,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    30,    30,   nil,   nil,    30,   nil,
   nil,    30,   nil,   nil,   nil,   nil,   nil,    30,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    30,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    30,   nil,
   nil,   nil,    30,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    30 ]

racc_goto_pointer = [
   nil,    80,     2,    42,   -20,  -191,     9,   nil,   -19,   nil,
   -26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -28,    29,    47,   380,   255,   160,   277,   -35,    34,   -29,
   516,  -168,   120,     0,    32,   -91,    25,     3,     7,   -52,
  -159,   -64,  -146,   -49,   nil,    28,   -32,  -191,   nil,   nil,
   nil,   -92,   nil,   135,   -46,   nil,  -206,     2,   -46,   -39,
  -266,   nil,    11,  -179,  -199,   nil,   -54,   -13,   -56,   -86,
   -29,     7,    -8,  -105,    34,   -43,   -11,  -133,   -50,   -49,
  -107,  -177,   -15,   -75,   nil ]

racc_goto_default = [
   nil,   nil,   294,   147,    34,   nil,    42,    46,    50,     5,
     7,    14,    20,    23,    28,    33,    39,    41,    45,    49,
     4,   nil,    78,    80,    85,    87,    90,   nil,   nil,    94,
   153,   242,    75,    79,    81,    84,    86,    89,    37,   nil,
   nil,   nil,   nil,   nil,    11,   nil,   nil,   146,   237,   149,
   150,   nil,   213,    74,   154,   160,   161,   nil,   nil,   nil,
   nil,    93,    43,   nil,   nil,   298,     8,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   101,   nil,   nil,
   nil,   nil,   nil,   nil,   174 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 70, :_reduce_3,
  2, 70, :_reduce_4,
  1, 73, :_reduce_5,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  3, 87, :_reduce_20,
  3, 87, :_reduce_21,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  4, 81, :_reduce_34,
  5, 81, :_reduce_35,
  3, 81, :_reduce_36,
  2, 81, :_reduce_37,
  1, 96, :_reduce_38,
  3, 96, :_reduce_39,
  1, 95, :_reduce_40,
  3, 95, :_reduce_41,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  5, 74, :_reduce_53,
  5, 74, :_reduce_54,
  5, 74, :_reduce_55,
  5, 85, :_reduce_56,
  2, 75, :_reduce_57,
  1, 112, :_reduce_58,
  2, 112, :_reduce_59,
  6, 76, :_reduce_60,
  2, 76, :_reduce_61,
  3, 113, :_reduce_62,
  3, 113, :_reduce_63,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  3, 114, :_reduce_66,
  1, 115, :_reduce_none,
  3, 115, :_reduce_68,
  1, 116, :_reduce_69,
  1, 116, :_reduce_70,
  3, 117, :_reduce_71,
  3, 117, :_reduce_72,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  4, 119, :_reduce_75,
  1, 107, :_reduce_76,
  3, 107, :_reduce_77,
  0, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 105, :_reduce_80,
  1, 100, :_reduce_81,
  1, 101, :_reduce_82,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  3, 77, :_reduce_90,
  3, 77, :_reduce_91,
  3, 86, :_reduce_92,
  0, 109, :_reduce_93,
  1, 109, :_reduce_94,
  3, 109, :_reduce_95,
  3, 122, :_reduce_96,
  3, 123, :_reduce_97,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  0, 111, :_reduce_100,
  1, 111, :_reduce_101,
  3, 111, :_reduce_102,
  4, 104, :_reduce_103,
  3, 104, :_reduce_104,
  1, 92, :_reduce_105,
  2, 92, :_reduce_106,
  2, 125, :_reduce_107,
  1, 126, :_reduce_108,
  2, 126, :_reduce_109,
  1, 102, :_reduce_110,
  4, 90, :_reduce_111,
  4, 90, :_reduce_112,
  2, 79, :_reduce_113,
  5, 127, :_reduce_114,
  4, 127, :_reduce_115,
  0, 128, :_reduce_none,
  2, 128, :_reduce_117,
  4, 128, :_reduce_118,
  3, 128, :_reduce_119,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  3, 98, :_reduce_122,
  3, 98, :_reduce_123,
  3, 98, :_reduce_124,
  3, 98, :_reduce_125,
  3, 98, :_reduce_126,
  3, 98, :_reduce_127,
  3, 98, :_reduce_128,
  3, 98, :_reduce_129,
  3, 98, :_reduce_130,
  2, 98, :_reduce_131,
  3, 98, :_reduce_132,
  3, 98, :_reduce_133,
  3, 98, :_reduce_134,
  3, 98, :_reduce_135,
  3, 98, :_reduce_136,
  3, 98, :_reduce_137,
  2, 98, :_reduce_138,
  3, 98, :_reduce_139,
  3, 98, :_reduce_140,
  3, 98, :_reduce_141,
  5, 78, :_reduce_142,
  1, 131, :_reduce_143,
  2, 131, :_reduce_144,
  5, 132, :_reduce_145,
  4, 132, :_reduce_146,
  1, 133, :_reduce_147,
  3, 133, :_reduce_148,
  3, 93, :_reduce_149,
  1, 135, :_reduce_none,
  4, 135, :_reduce_151,
  1, 137, :_reduce_none,
  3, 137, :_reduce_153,
  3, 136, :_reduce_154,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_163,
  1, 134, :_reduce_none,
  1, 138, :_reduce_165,
  1, 139, :_reduce_none,
  3, 139, :_reduce_167,
  2, 80, :_reduce_168,
  6, 82, :_reduce_169,
  5, 82, :_reduce_170,
  7, 83, :_reduce_171,
  6, 83, :_reduce_172,
  6, 84, :_reduce_173,
  5, 84, :_reduce_174,
  1, 106, :_reduce_175,
  1, 106, :_reduce_176,
  1, 142, :_reduce_177,
  3, 142, :_reduce_178,
  1, 144, :_reduce_179,
  1, 145, :_reduce_180,
  1, 145, :_reduce_181,
  1, 145, :_reduce_182,
  1, 145, :_reduce_none,
  0, 71, :_reduce_184,
  0, 146, :_reduce_185,
  1, 140, :_reduce_none,
  3, 140, :_reduce_187,
  4, 140, :_reduce_188,
  1, 147, :_reduce_none,
  3, 147, :_reduce_190,
  3, 148, :_reduce_191,
  1, 148, :_reduce_192,
  3, 148, :_reduce_193,
  1, 148, :_reduce_194,
  1, 143, :_reduce_none,
  2, 143, :_reduce_196,
  1, 141, :_reduce_none,
  2, 141, :_reduce_198,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 91, :_reduce_201,
  3, 103, :_reduce_202,
  4, 103, :_reduce_203,
  2, 103, :_reduce_204,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  0, 110, :_reduce_none,
  1, 110, :_reduce_208,
  1, 130, :_reduce_209,
  3, 129, :_reduce_210,
  4, 129, :_reduce_211,
  2, 129, :_reduce_212,
  1, 150, :_reduce_none,
  3, 150, :_reduce_214,
  3, 151, :_reduce_215,
  1, 152, :_reduce_216,
  1, 152, :_reduce_217,
  4, 121, :_reduce_218,
  1, 94, :_reduce_none,
  4, 94, :_reduce_220 ]

racc_reduce_n = 221

racc_shift_n = 374

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67 }

racc_nt_base = 68

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "rvalue",
  "expression",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "funcrvalue",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 34)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 46)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

module_eval(<<'.,.,', 'grammar.ra', 72)
  def _reduce_20(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 75)
  def _reduce_21(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

module_eval(<<'.,.,', 'grammar.ra', 90)
  def _reduce_34(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 97)
  def _reduce_35(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 103)
  def _reduce_36(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 110)
  def _reduce_37(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 117)
  def _reduce_38(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 120)
  def _reduce_39(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 124)
  def _reduce_40(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 125)
  def _reduce_41(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

module_eval(<<'.,.,', 'grammar.ra', 140)
  def _reduce_53(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 143)
  def _reduce_54(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 146)
  def _reduce_55(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 153)
  def _reduce_56(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 160)
  def _reduce_57(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 176)
  def _reduce_58(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 177)
  def _reduce_59(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 182)
  def _reduce_60(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 200)
  def _reduce_61(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 218)
  def _reduce_62(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 226)
  def _reduce_63(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 64 omitted

# reduce 65 omitted

module_eval(<<'.,.,', 'grammar.ra', 239)
  def _reduce_66(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 67 omitted

module_eval(<<'.,.,', 'grammar.ra', 244)
  def _reduce_68(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 248)
  def _reduce_69(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 249)
  def _reduce_70(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 252)
  def _reduce_71(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 257)
  def _reduce_72(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 73 omitted

# reduce 74 omitted

module_eval(<<'.,.,', 'grammar.ra', 266)
  def _reduce_75(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 269)
  def _reduce_76(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 271)
  def _reduce_77(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 78 omitted

# reduce 79 omitted

module_eval(<<'.,.,', 'grammar.ra', 279)
  def _reduce_80(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 283)
  def _reduce_81(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 287)
  def _reduce_82(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

module_eval(<<'.,.,', 'grammar.ra', 299)
  def _reduce_90(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 305)
  def _reduce_91(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 309)
  def _reduce_92(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 315)
  def _reduce_93(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 317)
  def _reduce_94(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 319)
  def _reduce_95(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 324)
  def _reduce_96(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 328)
  def _reduce_97(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

module_eval(<<'.,.,', 'grammar.ra', 337)
  def _reduce_100(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 339)
  def _reduce_101(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 341)
  def _reduce_102(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 347)
  def _reduce_103(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 352)
  def _reduce_104(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 358)
  def _reduce_105(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 359)
  def _reduce_106(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 361)
  def _reduce_107(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 363)
  def _reduce_108(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 364)
  def _reduce_109(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 367)
  def _reduce_110(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 371)
  def _reduce_111(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 374)
  def _reduce_112(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 378)
  def _reduce_113(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 382)
  def _reduce_114(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 393)
  def _reduce_115(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 116 omitted

module_eval(<<'.,.,', 'grammar.ra', 406)
  def _reduce_117(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 409)
  def _reduce_118(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 413)
  def _reduce_119(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 120 omitted

# reduce 121 omitted

module_eval(<<'.,.,', 'grammar.ra', 432)
  def _reduce_122(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 435)
  def _reduce_123(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 438)
  def _reduce_124(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 441)
  def _reduce_125(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 444)
  def _reduce_126(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 447)
  def _reduce_127(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 450)
  def _reduce_128(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 453)
  def _reduce_129(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 456)
  def _reduce_130(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 459)
  def _reduce_131(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 462)
  def _reduce_132(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 465)
  def _reduce_133(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 468)
  def _reduce_134(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 471)
  def _reduce_135(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 474)
  def _reduce_136(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 477)
  def _reduce_137(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 480)
  def _reduce_138(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 483)
  def _reduce_139(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 486)
  def _reduce_140(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 489)
  def _reduce_141(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 493)
  def _reduce_142(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 497)
  def _reduce_143(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 499)
  def _reduce_144(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 504)
  def _reduce_145(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 507)
  def _reduce_146(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 517)
  def _reduce_147(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 519)
  def _reduce_148(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 524)
  def _reduce_149(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 150 omitted

module_eval(<<'.,.,', 'grammar.ra', 529)
  def _reduce_151(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 152 omitted

module_eval(<<'.,.,', 'grammar.ra', 535)
  def _reduce_153(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 544)
  def _reduce_154(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

module_eval(<<'.,.,', 'grammar.ra', 556)
  def _reduce_163(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 164 omitted

module_eval(<<'.,.,', 'grammar.ra', 561)
  def _reduce_165(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 166 omitted

module_eval(<<'.,.,', 'grammar.ra', 563)
  def _reduce_167(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 566)
  def _reduce_168(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 576)
  def _reduce_169(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 584)
  def _reduce_170(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 592)
  def _reduce_171(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 599)
  def _reduce_172(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 608)
  def _reduce_173(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 613)
  def _reduce_174(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 617)
  def _reduce_175(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 618)
  def _reduce_176(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 623)
  def _reduce_177(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 626)
  def _reduce_178(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 631)
  def _reduce_179(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 634)
  def _reduce_180(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 635)
  def _reduce_181(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 636)
  def _reduce_182(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 183 omitted

module_eval(<<'.,.,', 'grammar.ra', 640)
  def _reduce_184(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 644)
  def _reduce_185(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 186 omitted

module_eval(<<'.,.,', 'grammar.ra', 649)
  def _reduce_187(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 652)
  def _reduce_188(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 189 omitted

module_eval(<<'.,.,', 'grammar.ra', 658)
  def _reduce_190(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 664)
  def _reduce_191(val, _values, result)
      Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
  result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 668)
  def _reduce_192(val, _values, result)
        Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 671)
  def _reduce_193(val, _values, result)
      result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 673)
  def _reduce_194(val, _values, result)
      result = [val[0][:value]]

    result
  end
.,.,

# reduce 195 omitted

module_eval(<<'.,.,', 'grammar.ra', 678)
  def _reduce_196(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 197 omitted

module_eval(<<'.,.,', 'grammar.ra', 683)
  def _reduce_198(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 199 omitted

# reduce 200 omitted

module_eval(<<'.,.,', 'grammar.ra', 689)
  def _reduce_201(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 692)
  def _reduce_202(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 693)
  def _reduce_203(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 694)
  def _reduce_204(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

module_eval(<<'.,.,', 'grammar.ra', 700)
  def _reduce_208(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 703)
  def _reduce_209(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 707)
  def _reduce_210(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 714)
  def _reduce_211(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 720)
  def _reduce_212(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 213 omitted

module_eval(<<'.,.,', 'grammar.ra', 725)
  def _reduce_214(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 734)
  def _reduce_215(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 737)
  def _reduce_216(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 738)
  def _reduce_217(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 741)
  def _reduce_218(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 219 omitted

module_eval(<<'.,.,', 'grammar.ra', 746)
  def _reduce_220(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
